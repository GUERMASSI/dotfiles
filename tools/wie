#!/usr/bin/env python
from __future__ import print_function

import sys
import subprocess

USAGE = '''
    Usage : wie [-k] [issue_number]

    Complete work on current branch, or branch matching issue number if set.
    Does not (obviously) work on master.

    -k : keep database to use for new issue

'''


def run_cmd(cmd, handle_error=True):
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    res, errs = p.communicate()
    if not handle_error:
        return res, errs
    if errs:
        print(errs, file=sys.stderr)
        sys.exit()
    return res, errs

# Get branch list
branches, errs = run_cmd(['git', 'branch'], False)

if errs:
    print(errs, file=sys.stderr)
    print(USAGE)
    sys.exit()

cur_branch = [x.lstrip('* ')
    for x in branches.split('\n') if x.startswith('* ')][0]
branches = [x.lstrip('* ') for x in branches.split('\n') if x]

keep_db = True
try:
    sys.argv.remove('-k')
except ValueError:
    keep_db = False

if (len(sys.argv) != 1 and cur_branch != 'master') or (
        len(sys.argv) != 2 and cur_branch == 'master'):
    print(USAGE)
    sys.exit()

if cur_branch == 'master':
    cur_branch = [x for x in branches if x.startswith(sys.argv[1])][0]
else:
    _, errs = run_cmd(['git', 'checkout', 'master'], False)

    if errs and not ('Already on ' in errs or 'Switched to ' in errs):
        print(errs, file=sys.stderr)
        sys.exit()

print('Removing branch')
run_cmd(['git', 'branch', '-D', cur_branch], False)

# Check for stellar
stellar_path, _ = run_cmd(['which', 'stellar'])
if not stellar_path:
    print('Stellar not found, no db for you, you should use it')
    sys.exit()

# Get stellar list
db_list, errs = run_cmd(['stellar', 'list'])

if not db_list or errs:
    if errs:
        print(errs, file=sys.stderr)
    else:
        print('Stellar uninitialized, nothing can be done')
    sys.exit()

db_list = [x.split(':')[0] for x in db_list.split('\n') if x]

if 'clean' not in db_list:
    print("'clean' snapshot not found, stopping here")
    sys.exit()

if '/' in cur_branch:
    cur_issue = cur_branch.split('/')[0]
else:
    cur_issue = cur_branch
if cur_issue in db_list:
    print('Deleting db ' + cur_issue)
    run_cmd(['stellar', 'remove', cur_issue])

if keep_db:
    print('No new db')
    sys.exit()

print('Cleaning db for new issue')
run_cmd(['stellar', 'restore', 'clean'])
